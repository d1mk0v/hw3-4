package ru.hogwaarts.school;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@OpenAPIDefinition
public class SchoolApplication {

	public static void main(String[] args) {
		SpringApplication.run(SchoolApplication.class, args);
	}

}

//		Домашнее задание урока 3.4. Введение в SQL.
//		В прошлой домашней работе мы смогли поработать с базами данных: установили базу данных PostgreSQL, подключили
//		к ней наше приложение и переделали логику сервисов так, чтобы все наши данные теперь хранились в БД.
//
//		Цель сегодняшней домашней работы — углубиться в язык запросов SQL и написать несколько SELECT-методов.
//		А также установить связь ManyToOne между факультетами и студентами.

//		**Шаг 1**
//		Добавить эндпоинт для получения всех студентов, возраст которых находится в промежутке, пришедшем в запросе,
//		т.е. в GET-запросе будут передаваться два числа (min и max). Для этого в репозитории следует создать метод
//		findByAgeBetween().
//
//		Добавить эндпоинт для поиска факультета по имени или цвету, игнорируя регистр, т.е. в GET-запросе будет
//		передана строка, по которой будет происходить фильтрация.
//
//		**Шаг 2**
//		Подключиться с помощью IDEA к базе данных и выполнить простой запрос select * from student.
//
//		**Шаг 3**
//		Составить следующие SQL-запросы:
//
//		1. Получить всех студентов, возраст которых находится между 10 и 20 (можно подставить любые числа, главное, чтобы нижняя граница была меньше верхней).
//		2. Получить всех студентов, но отобразить только список их имен.
//		3. Получить всех студентов, у которых в имени присутствует буква «О» (или любая другая).
//		4. Получить всех студентов, у которых возраст меньше идентификатора.
//		5. Получить всех студентов упорядоченных по возрасту.
//
//		В корне проекта создать файл scripts.sql и поместить в него составленные запросы.

//		**Шаг 4**
//		Настроить связь ManyToOne между студентами и факультетом. При этом у модели студента должно быть создано поле Faculty, а у модели факультета — список студентов.
//		Добавить два эндпоинта в соответствующие контроллеры которые позволят:
//
//		1. Получить факультет студента
//		2. Получить студентов факультета

